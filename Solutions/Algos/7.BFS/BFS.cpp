#include <bits/stdc++.h>
using namespace std;
#define X first
#define Y second // pair에서 first, second를 줄여서 쓰기 위해서 사용

// 1이 파란 칸, 0이 빨간 칸에 대응
int board[502][502] =
{
 {1,1,1,0,1,0,0,0,0,0},
 {1,0,0,0,1,0,0,0,0,0},
 {1,1,1,0,1,0,0,0,0,0},
 {1,1,0,0,1,0,0,0,0,0},
 {0,1,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0}
};

// 해당 칸을 방문했는지 여부를 저장
bool vis[502][502];

// n = 행의 수, m = 열의 수
int n = 7, m = 10;

// 상하좌우 네 방향을 의미
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

int main(void) {
  ios::sync_with_stdio(0);
  cin.tie(0);

  //탐색한 좌표들을 저장할 큐
  queue<pair<int, int> > Q;

  // (0, 0)을 방문했다고 명시
  vis[0][0] = 1;

  // 큐에 시작점인 (0, 0)을 삽입.
  Q.push({ 0,0 });

  /*
    1. 현재 검사하는 좌표를 담아놓을 변수 cur 에 검사할 좌표들 중 처음 값을 넣어주고
    2. 큐에서 현재 검사하는 좌표를 pop 해준다.
    3. 위에 선언한 dx , dy 배열을 이용하여 상 하 좌 우 네방향을 검사
    4. 검사할 좌표가 비어있지 않고 방문하지 않았다면 방문했다고 명시(동일한 좌표의 vis 배열에 1을 넣어줌)
    5. 그리고 큐에 방문한 좌표를 넣어준다.
    6. 큐가 빌때까지 1~5를 반복.
  */
  while (!Q.empty()) {
    //현재 검사하는 좌표를 담아놓을 변수
    pair<int, int> cur = Q.front();

    //큐에서 현재 검사하는 좌표를 pop
    Q.pop();

    cout << '(' << cur.X << ", " << cur.Y << ") -> ";

    // 상하좌우 칸을 살펴볼 것이다.
    for (int dir = 0; dir < 4; dir++) {

      // nx, ny에 dir에서 정한 방향의 인접한 칸의 좌표가 들어감
      int nx = cur.X + dx[dir];
      int ny = cur.Y + dy[dir];

      // 범위 밖일 경우 넘어감
      if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;

      // 이미 방문한 칸이거나 파란 칸이 아닐 경우
      if (vis[nx][ny] || board[nx][ny] != 1) continue;

      vis[nx][ny] = 1; // (nx, ny)를 방문했다고 명시

      //방문한 좌표를 큐에 담아놓는다 (그 칸을 기준으로 탐색을 또 해야 하기에)
      Q.push({ nx,ny });
    }
  }
}
